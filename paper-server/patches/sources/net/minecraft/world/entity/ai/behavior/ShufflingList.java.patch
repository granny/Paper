From 8970c8040a87bb9da1d22cabfd5dafb79924ed1f Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 06:37:42 -0700
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/entity/ai/behavior/ShufflingList.java b/net/minecraft/world/entity/ai/behavior/ShufflingList.java
index 9a7dac52abf58b7fc061ac168321ce0d93be5e87..0d5fd83a30d3ba6838f5b2229b9959e983182437 100644
--- a/net/minecraft/world/entity/ai/behavior/ShufflingList.java
+++ b/net/minecraft/world/entity/ai/behavior/ShufflingList.java
@@ -16,12 +16,25 @@ import net.minecraft.util.RandomSource;
 public class ShufflingList<U> implements Iterable<U> {
     protected final List<ShufflingList.WeightedEntry<U>> entries;
     private final RandomSource random = RandomSource.create();
+    private final boolean isUnsafe; // Paper - Fix Concurrency issue in ShufflingList during worldgen
 
     public ShufflingList() {
+        // Paper start - Fix Concurrency issue in ShufflingList during worldgen
+        this(true);
+    }
+    public ShufflingList(boolean isUnsafe) {
+        this.isUnsafe = isUnsafe;
+        // Paper end - Fix Concurrency issue in ShufflingList during worldgen
         this.entries = Lists.newArrayList();
     }
 
     private ShufflingList(List<ShufflingList.WeightedEntry<U>> entries) {
+        // Paper start - Fix Concurrency issue in ShufflingList during worldgen
+        this(entries, true);
+    }
+    private ShufflingList(List<ShufflingList.WeightedEntry<U>> entries, boolean isUnsafe) {
+        this.isUnsafe = isUnsafe;
+        // Paper end - Fix Concurrency issue in ShufflingList during worldgen
         this.entries = Lists.newArrayList(entries);
     }
 
@@ -35,9 +48,12 @@ public class ShufflingList<U> implements Iterable<U> {
     }
 
     public ShufflingList<U> shuffle() {
-        this.entries.forEach(entry -> entry.setRandom(this.random.nextFloat()));
-        this.entries.sort(Comparator.comparingDouble(ShufflingList.WeightedEntry::getRandWeight));
-        return this;
+        // Paper start - Fix Concurrency issue in ShufflingList during worldgen
+        List<ShufflingList.WeightedEntry<U>> list = this.isUnsafe ? Lists.newArrayList(this.entries) : this.entries;
+        list.forEach(entry -> entry.setRandom(this.random.nextFloat()));
+        list.sort(Comparator.comparingDouble(ShufflingList.WeightedEntry::getRandWeight));
+        return this.isUnsafe ? new ShufflingList<>(list, this.isUnsafe) : this;
+        // Paper end - Fix Concurrency issue in ShufflingList during worldgen
     }
 
     public Stream<U> stream() {
