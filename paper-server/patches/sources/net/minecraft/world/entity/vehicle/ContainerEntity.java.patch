From 8970c8040a87bb9da1d22cabfd5dafb79924ed1f Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 06:37:42 -0700
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/entity/vehicle/ContainerEntity.java b/net/minecraft/world/entity/vehicle/ContainerEntity.java
index 498e188a4b5fa22378fe146bba689fff595575af..feebd1610ebd3c26a337259c14f5c774dc72b937 100644
--- a/net/minecraft/world/entity/vehicle/ContainerEntity.java
+++ b/net/minecraft/world/entity/vehicle/ContainerEntity.java
@@ -60,12 +60,12 @@ public interface ContainerEntity extends Container, MenuProvider {
     default void addChestVehicleSaveData(CompoundTag tag, HolderLookup.Provider levelRegistry) {
         if (this.getContainerLootTable() != null) {
             tag.putString("LootTable", this.getContainerLootTable().location().toString());
+            this.lootableData().saveNbt(tag); // Paper
             if (this.getContainerLootTableSeed() != 0L) {
                 tag.putLong("LootTableSeed", this.getContainerLootTableSeed());
             }
-        } else {
-            ContainerHelper.saveAllItems(tag, this.getItemStacks(), levelRegistry);
         }
+        ContainerHelper.saveAllItems(tag, this.getItemStacks(), levelRegistry); // Paper - always save the items, table may still remain
     }
 
     default void readChestVehicleSaveData(CompoundTag tag, HolderLookup.Provider levelRegistry) {
@@ -73,7 +73,12 @@ public interface ContainerEntity extends Container, MenuProvider {
         ResourceKey<LootTable> resourceKey = tag.read("LootTable", LootTable.KEY_CODEC).orElse(null);
         this.setContainerLootTable(resourceKey);
         this.setContainerLootTableSeed(tag.getLongOr("LootTableSeed", 0L));
-        if (resourceKey == null) {
+        // Paper start - LootTable API
+        if (this.getContainerLootTable() != null) {
+            this.lootableData().loadNbt(tag);
+        }
+        // Paper end - LootTable API
+        if (true || resourceKey == null) { // Paper - always read the items, table may still remain
             ContainerHelper.loadAllItems(tag, this.getItemStacks(), levelRegistry);
         }
     }
@@ -89,19 +94,27 @@ public interface ContainerEntity extends Container, MenuProvider {
     }
 
     default InteractionResult interactWithContainerVehicle(Player player) {
-        player.openMenu(this);
+        // Paper start - Fix InventoryOpenEvent cancellation
+        if (player.openMenu(this).isEmpty()) {
+            return InteractionResult.PASS;
+        }
+        // Paper end - Fix InventoryOpenEvent cancellation
         return InteractionResult.SUCCESS;
     }
 
     default void unpackChestVehicleLootTable(@Nullable Player player) {
         MinecraftServer server = this.level().getServer();
-        if (this.getContainerLootTable() != null && server != null) {
+        if (server != null && this.lootableData().shouldReplenish(this, com.destroystokyo.paper.loottable.PaperLootableInventoryData.ENTITY, player)) { // Paper - LootTable API
             LootTable lootTable = server.reloadableRegistries().getLootTable(this.getContainerLootTable());
             if (player != null) {
                 CriteriaTriggers.GENERATE_LOOT.trigger((ServerPlayer)player, this.getContainerLootTable());
             }
 
-            this.setContainerLootTable(null);
+            // Paper start - LootTable API
+            if (this.lootableData().shouldClearLootTable(this, com.destroystokyo.paper.loottable.PaperLootableInventoryData.ENTITY, player)) {
+                this.setContainerLootTable(null);
+            }
+            // Paper end - LootTable API
             LootParams.Builder builder = new LootParams.Builder((ServerLevel)this.level()).withParameter(LootContextParams.ORIGIN, this.position());
             if (player != null) {
                 builder.withLuck(player.getLuck()).withParameter(LootContextParams.THIS_ENTITY, player);
@@ -171,4 +184,14 @@ public interface ContainerEntity extends Container, MenuProvider {
     default boolean isChestVehicleStillValid(Player player) {
         return !this.isRemoved() && player.canInteractWithEntity(this.getBoundingBox(), 4.0);
     }
+
+    // Paper start - LootTable API
+    default com.destroystokyo.paper.loottable.PaperLootableInventoryData lootableData() {
+        throw new UnsupportedOperationException("Implement this method");
+    }
+
+    default com.destroystokyo.paper.loottable.PaperLootableInventory getLootableInventory() {
+        return ((com.destroystokyo.paper.loottable.PaperLootableInventory) ((Entity) this).getBukkitEntity());
+    }
+    // Paper end - LootTable API
 }
