From 8970c8040a87bb9da1d22cabfd5dafb79924ed1f Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 06:37:42 -0700
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/level/block/state/BlockBehaviour.java b/net/minecraft/world/level/block/state/BlockBehaviour.java
index 6015c332a9acf569431ab4899c2b81592ee6fb1e..9be91c4bbb8cc780dc2f99ada12f963fdac95905 100644
--- a/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -168,13 +168,20 @@ public abstract class BlockBehaviour implements FeatureElement {
     }
 
     protected void onPlace(BlockState state, Level level, BlockPos pos, BlockState oldState, boolean movedByPiston) {
+        org.spigotmc.AsyncCatcher.catchOp("block onPlace"); // Spigot
     }
 
     protected void affectNeighborsAfterRemoval(BlockState state, ServerLevel level, BlockPos pos, boolean movedByPiston) {
     }
 
+    // CraftBukkit start
+    protected void onPlace(BlockState state, Level level, BlockPos pos, BlockState oldState, boolean movedByPiston, @Nullable net.minecraft.world.item.context.UseOnContext context) {
+        this.onPlace(state, level, pos, oldState, movedByPiston);
+    }
+    // CraftBukkit end
+
     protected void onExplosionHit(BlockState state, ServerLevel level, BlockPos pos, Explosion explosion, BiConsumer<ItemStack, BlockPos> dropConsumer) {
-        if (!state.isAir() && explosion.getBlockInteraction() != Explosion.BlockInteraction.TRIGGER_BLOCK) {
+        if (!state.isAir() && explosion.getBlockInteraction() != Explosion.BlockInteraction.TRIGGER_BLOCK && state.isDestroyable()) { // Paper - Protect Bedrock and End Portal/Frames from being destroyed
             Block block = state.getBlock();
             boolean flag = explosion.getIndirectSourceEntity() instanceof Player;
             if (block.dropFromExplosion(explosion)) {
@@ -184,8 +191,10 @@ public abstract class BlockBehaviour implements FeatureElement {
                     .withParameter(LootContextParams.TOOL, ItemStack.EMPTY)
                     .withOptionalParameter(LootContextParams.BLOCK_ENTITY, blockEntity)
                     .withOptionalParameter(LootContextParams.THIS_ENTITY, explosion.getDirectSourceEntity());
-                if (explosion.getBlockInteraction() == Explosion.BlockInteraction.DESTROY_WITH_DECAY) {
-                    builder.withParameter(LootContextParams.EXPLOSION_RADIUS, explosion.radius());
+                // CraftBukkit start - add yield
+                if (explosion instanceof net.minecraft.world.level.ServerExplosion serverExplosion && serverExplosion.yield < 1.0F) {
+                    builder.withParameter(LootContextParams.EXPLOSION_RADIUS, 1.0F / serverExplosion.yield);
+                    // CraftBukkit end
                 }
 
                 state.spawnAfterBreak(level, pos, ItemStack.EMPTY, flag);
@@ -253,7 +262,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     }
 
     protected boolean canBeReplaced(BlockState state, BlockPlaceContext useContext) {
-        return state.canBeReplaced() && (useContext.getItemInHand().isEmpty() || !useContext.getItemInHand().is(this.asItem()));
+        return state.canBeReplaced() && (useContext.getItemInHand().isEmpty() || !useContext.getItemInHand().is(this.asItem())) && (state.isDestroyable() || (useContext.getPlayer() != null && useContext.getPlayer().getAbilities().instabuild)); // Paper - Protect Bedrock and End Portal/Frames from being destroyed
     }
 
     protected boolean canBeReplaced(BlockState state, Fluid fluid) {
@@ -467,6 +476,16 @@ public abstract class BlockBehaviour implements FeatureElement {
             this.replaceable = properties.replaceable;
         }
 
+        // Paper start - Perf: impl cached craft block data, lazy load to fix issue with loading at the wrong time
+        @Nullable
+        private org.bukkit.craftbukkit.block.CraftBlockData cachedCraftBlockData;
+
+        public org.bukkit.craftbukkit.block.CraftBlockData createCraftBlockData() {
+            if (this.cachedCraftBlockData == null) this.cachedCraftBlockData = org.bukkit.craftbukkit.block.CraftBlockData.createData(this.asState());
+            return (org.bukkit.craftbukkit.block.CraftBlockData) this.cachedCraftBlockData.clone();
+        }
+        // Paper end - Perf: impl cached craft block data, lazy load to fix issue with loading at the wrong time
+
         private boolean calculateSolid() {
             if (this.owner.properties.forceSolidOn) {
                 return true;
@@ -485,12 +504,14 @@ public abstract class BlockBehaviour implements FeatureElement {
             }
         }
 
+        protected boolean shapeExceedsCube = true; // Paper - moved from actual method to here
         public void initCache() {
             this.fluidState = this.owner.getFluidState(this.asState());
             this.isRandomlyTicking = this.owner.isRandomlyTicking(this.asState());
             if (!this.getBlock().hasDynamicShape()) {
                 this.cache = new BlockBehaviour.BlockStateBase.Cache(this.asState());
             }
+            this.shapeExceedsCube = this.cache == null || this.cache.largeCollisionShape; // Paper - moved from actual method to here
 
             this.legacySolid = this.calculateSolid();
             this.occlusionShape = this.canOcclude ? this.owner.getOcclusionShape(this.asState()) : Shapes.empty();
@@ -529,6 +550,11 @@ public abstract class BlockBehaviour implements FeatureElement {
         public boolean isSolid() {
             return this.legacySolid;
         }
+        // Paper start - Protect Bedrock and End Portal/Frames from being destroyed
+        public final boolean isDestroyable() {
+            return getBlock().isDestroyable();
+        }
+        // Paper end - Protect Bedrock and End Portal/Frames from being destroyed
 
         public boolean isValidSpawn(BlockGetter level, BlockPos pos, EntityType<?> entityType) {
             return this.getBlock().properties.isValidSpawn.test(this.asState(), level, pos, entityType);
@@ -550,19 +576,19 @@ public abstract class BlockBehaviour implements FeatureElement {
             return this.occlusionShape;
         }
 
-        public boolean hasLargeCollisionShape() {
-            return this.cache == null || this.cache.largeCollisionShape;
+        public final boolean hasLargeCollisionShape() { // Paper
+            return this.shapeExceedsCube; // Paper - moved into shape cache init
         }
 
-        public boolean useShapeForLightOcclusion() {
+        public final boolean useShapeForLightOcclusion() { // Paper - Perf: Final for inlining
             return this.useShapeForLightOcclusion;
         }
 
-        public int getLightEmission() {
+        public final int getLightEmission() { // Paper - Perf: Final for inlining
             return this.lightEmission;
         }
 
-        public boolean isAir() {
+        public final boolean isAir() { // Paper - Perf: Final for inlining
             return this.isAir;
         }
 
@@ -632,14 +658,14 @@ public abstract class BlockBehaviour implements FeatureElement {
         }
 
         public PushReaction getPistonPushReaction() {
-            return this.pushReaction;
+            return !this.isDestroyable() ? PushReaction.BLOCK : this.pushReaction; // Paper - Protect Bedrock and End Portal/Frames from being destroyed
         }
 
         public boolean isSolidRender() {
             return this.solidRender;
         }
 
-        public boolean canOcclude() {
+        public final boolean canOcclude() { // Paper - Perf: Final for inlining
             return this.canOcclude;
         }
 
@@ -727,7 +753,13 @@ public abstract class BlockBehaviour implements FeatureElement {
         }
 
         public void onPlace(Level level, BlockPos pos, BlockState oldState, boolean movedByPiston) {
-            this.getBlock().onPlace(this.asState(), level, pos, oldState, movedByPiston);
+            // CraftBukkit start
+            this.onPlace(level, pos, oldState, movedByPiston, null);
+        }
+
+        public void onPlace(Level level, BlockPos pos, BlockState oldState, boolean movedByPiston, @Nullable net.minecraft.world.item.context.UseOnContext context) {
+            this.getBlock().onPlace(this.asState(), level, pos, oldState, movedByPiston, context);
+            // CraftBukkit end
         }
 
         public void affectNeighborsAfterRemoval(ServerLevel level, BlockPos pos, boolean movedByPiston) {
@@ -752,6 +784,7 @@ public abstract class BlockBehaviour implements FeatureElement {
 
         public void spawnAfterBreak(ServerLevel level, BlockPos pos, ItemStack stack, boolean dropExperience) {
             this.getBlock().spawnAfterBreak(this.asState(), level, pos, stack, dropExperience);
+            if (dropExperience) {this.getBlock().popExperience(level, pos, this.getBlock().getExpDrop(this.asState(), level, pos, stack, true));} // Paper - Properly handle xp dropping
         }
 
         public List<ItemStack> getDrops(LootParams.Builder lootParams) {
@@ -856,11 +889,11 @@ public abstract class BlockBehaviour implements FeatureElement {
             return this.getBlock().builtInRegistryHolder().is(block);
         }
 
-        public FluidState getFluidState() {
+        public final FluidState getFluidState() { // Paper - Perf: Final for inlining
             return this.fluidState;
         }
 
-        public boolean isRandomlyTicking() {
+        public final boolean isRandomlyTicking() { // Paper - Perf: Final for inlining
             return this.isRandomlyTicking;
         }
 
