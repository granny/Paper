From 8970c8040a87bb9da1d22cabfd5dafb79924ed1f Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 06:37:42 -0700
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/item/alchemy/PotionBrewing.java b/net/minecraft/world/item/alchemy/PotionBrewing.java
index 23ff0b885f77d1b7679b009b364d0ea6b580b4e5..f7826f1ab4985cd7a754c4c550252943e874864e 100644
--- a/net/minecraft/world/item/alchemy/PotionBrewing.java
+++ b/net/minecraft/world/item/alchemy/PotionBrewing.java
@@ -19,6 +19,7 @@ public class PotionBrewing {
     private final List<Ingredient> containers;
     private final List<PotionBrewing.Mix<Potion>> potionMixes;
     private final List<PotionBrewing.Mix<Item>> containerMixes;
+    private final it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<org.bukkit.NamespacedKey, io.papermc.paper.potion.PaperPotionMix> customMixes = new it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap<>(); // Paper - Custom Potion Mixes
 
     PotionBrewing(List<Ingredient> containers, List<PotionBrewing.Mix<Potion>> potionMixes, List<PotionBrewing.Mix<Item>> containerMixes) {
         this.containers = containers;
@@ -27,7 +28,7 @@ public class PotionBrewing {
     }
 
     public boolean isIngredient(ItemStack stack) {
-        return this.isContainerIngredient(stack) || this.isPotionIngredient(stack);
+        return this.isContainerIngredient(stack) || this.isPotionIngredient(stack) || this.isCustomIngredient(stack); // Paper - Custom Potion Mixes
     }
 
     private boolean isContainer(ItemStack stack) {
@@ -71,6 +72,11 @@ public class PotionBrewing {
     }
 
     public boolean hasMix(ItemStack reagent, ItemStack potionItem) {
+        // Paper start - Custom Potion Mixes
+        if (this.hasCustomMix(reagent, potionItem)) {
+            return true;
+        }
+        // Paper end - Custom Potion Mixes
         return this.isContainer(reagent) && (this.hasContainerMix(reagent, potionItem) || this.hasPotionMix(reagent, potionItem));
     }
 
@@ -103,6 +109,13 @@ public class PotionBrewing {
         if (potionItem.isEmpty()) {
             return potionItem;
         } else {
+            // Paper start - Custom Potion Mixes
+            for (io.papermc.paper.potion.PaperPotionMix mix : this.customMixes.values()) {
+                if (mix.input().test(potionItem) && mix.ingredient().test(potion)) {
+                    return mix.result().copy();
+                }
+            }
+            // Paper end - Custom Potion Mixes
             Optional<Holder<Potion>> optional = potionItem.getOrDefault(DataComponents.POTION_CONTENTS, PotionContents.EMPTY).potion();
             if (optional.isEmpty()) {
                 return potionItem;
@@ -190,6 +203,50 @@ public class PotionBrewing {
         builder.addMix(Potions.SLOW_FALLING, Items.REDSTONE, Potions.LONG_SLOW_FALLING);
     }
 
+    // Paper start - Custom Potion Mixes
+    public boolean isCustomIngredient(ItemStack stack) {
+        for (io.papermc.paper.potion.PaperPotionMix mix : this.customMixes.values()) {
+            if (mix.ingredient().test(stack)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public boolean isCustomInput(ItemStack stack) {
+        for (io.papermc.paper.potion.PaperPotionMix mix : this.customMixes.values()) {
+            if (mix.input().test(stack)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean hasCustomMix(ItemStack input, ItemStack ingredient) {
+        for (io.papermc.paper.potion.PaperPotionMix mix : this.customMixes.values()) {
+            if (mix.input().test(input) && mix.ingredient().test(ingredient)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public void addPotionMix(io.papermc.paper.potion.PotionMix mix) {
+        if (this.customMixes.containsKey(mix.getKey())) {
+            throw new IllegalArgumentException("Duplicate recipe ignored with ID " + mix.getKey());
+        }
+        this.customMixes.putAndMoveToFirst(mix.getKey(), new io.papermc.paper.potion.PaperPotionMix(mix));
+    }
+
+    public boolean removePotionMix(org.bukkit.NamespacedKey key) {
+        return this.customMixes.remove(key) != null;
+    }
+
+    public PotionBrewing reload(FeatureFlagSet flags) {
+        return bootstrap(flags);
+    }
+    // Paper end - Custom Potion Mixes
+
     public static class Builder {
         private final List<Ingredient> containers = new ArrayList<>();
         private final List<PotionBrewing.Mix<Potion>> potionMixes = new ArrayList<>();
