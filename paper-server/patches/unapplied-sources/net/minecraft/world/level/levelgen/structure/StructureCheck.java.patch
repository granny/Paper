From 8970c8040a87bb9da1d22cabfd5dafb79924ed1f Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 06:37:42 -0700
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/level/levelgen/structure/StructureCheck.java b/net/minecraft/world/level/levelgen/structure/StructureCheck.java
index eb8238743205cbecbff96a90c0c1399b1a054f4a..6a5451440751ad017324e3fec8cfd8efb118511b 100644
--- a/net/minecraft/world/level/levelgen/structure/StructureCheck.java
+++ b/net/minecraft/world/level/levelgen/structure/StructureCheck.java
@@ -41,7 +41,7 @@ public class StructureCheck {
     private final ChunkScanAccess storageAccess;
     private final RegistryAccess registryAccess;
     private final StructureTemplateManager structureTemplateManager;
-    private final ResourceKey<Level> dimension;
+    private final ResourceKey<net.minecraft.world.level.dimension.LevelStem> dimension; // Paper - fix missing CB diff
     private final ChunkGenerator chunkGenerator;
     private final RandomState randomState;
     private final LevelHeightAccessor heightAccessor;
@@ -55,7 +55,7 @@ public class StructureCheck {
         ChunkScanAccess storageAccess,
         RegistryAccess registryAccess,
         StructureTemplateManager structureTemplateManager,
-        ResourceKey<Level> dimension,
+        ResourceKey<net.minecraft.world.level.dimension.LevelStem> dimension, // Paper - fix missing CB diff
         ChunkGenerator chunkGenerator,
         RandomState randomState,
         LevelHeightAccessor heightAccessor,
@@ -75,6 +75,20 @@ public class StructureCheck {
         this.fixerUpper = fixerUpper;
     }
 
+    // Paper start - add missing structure salt configs
+    @Nullable
+    private Integer getSaltOverride(Structure type) {
+        if (this.heightAccessor instanceof net.minecraft.server.level.ServerLevel serverLevel) {
+            if (type instanceof net.minecraft.world.level.levelgen.structure.structures.MineshaftStructure) {
+                return serverLevel.spigotConfig.mineshaftSeed;
+            } else if (type instanceof net.minecraft.world.level.levelgen.structure.structures.BuriedTreasureStructure) {
+                return serverLevel.spigotConfig.buriedTreasureSeed;
+            }
+        }
+        return null;
+    }
+    // Paper end - add missing structure seed configs
+
     public StructureCheckResult checkStart(ChunkPos chunkPos, Structure structure, StructurePlacement placement, boolean skipKnownStructures) {
         long packedChunkPos = chunkPos.toLong();
         Object2IntMap<Structure> map = this.loadedChunks.get(packedChunkPos);
@@ -84,7 +98,7 @@ public class StructureCheck {
             StructureCheckResult structureCheckResult = this.tryLoadFromStorage(chunkPos, structure, skipKnownStructures, packedChunkPos);
             if (structureCheckResult != null) {
                 return structureCheckResult;
-            } else if (!placement.applyAdditionalChunkRestrictions(chunkPos.x, chunkPos.z, this.seed)) {
+            } else if (!placement.applyAdditionalChunkRestrictions(chunkPos.x, chunkPos.z, this.seed, this.getSaltOverride(structure))) { // Paper - add missing structure seed configs
                 return StructureCheckResult.START_NOT_PRESENT;
             } else {
                 boolean flag = this.featureChecks
