From 8970c8040a87bb9da1d22cabfd5dafb79924ed1f Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 06:37:42 -0700
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/level/chunk/storage/ChunkStorage.java b/net/minecraft/world/level/chunk/storage/ChunkStorage.java
index c5dcaf1418f3ff665f4996588f8a404459a676cc..273ba0bdcf2588ea12ecae03b6a566da24a34e2c 100644
--- a/net/minecraft/world/level/chunk/storage/ChunkStorage.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkStorage.java
@@ -38,17 +38,30 @@ public class ChunkStorage implements AutoCloseable {
         return this.worker.isOldChunkAround(pos, radius);
     }
 
+    // CraftBukkit start
     public CompoundTag upgradeChunkTag(
-        ResourceKey<Level> levelKey,
+        ResourceKey<net.minecraft.world.level.dimension.LevelStem> levelKey,
         Supplier<DimensionDataStorage> storage,
         CompoundTag chunkData,
-        Optional<ResourceKey<MapCodec<? extends ChunkGenerator>>> chunkGeneratorKey
+        Optional<ResourceKey<MapCodec<? extends ChunkGenerator>>> chunkGeneratorKey,
+        ChunkPos pos,
+        @Nullable net.minecraft.world.level.LevelAccessor levelAccessor
+        // CraftBukkit end
     ) {
         int version = getVersion(chunkData);
         if (version == SharedConstants.getCurrentVersion().getDataVersion().getVersion()) {
             return chunkData;
         } else {
             try {
+                // CraftBukkit start
+                if (version < 1466) {
+                    CompoundTag level = chunkData.getCompoundOrEmpty("Level");
+                    if (level.getBooleanOr("TerrainPopulated", false) && !level.getBooleanOr("LightPopulated", false)) {
+                        // Light is purged updating to 1.14+. We need to set light populated to true so the converter recognizes the chunk as being "full"
+                        level.putBoolean("LightPopulated", true);
+                    }
+                }
+                // CraftBukkit end
                 if (version < 1493) {
                     chunkData = DataFixTypes.CHUNK.update(this.fixerUpper, chunkData, version, 1493);
                     if (chunkData.getCompound("Level").flatMap(compoundTag -> compoundTag.getBoolean("hasLegacyStructureData")).orElse(false)) {
@@ -57,8 +70,22 @@ public class ChunkStorage implements AutoCloseable {
                     }
                 }
 
+                // Spigot start - SPIGOT-6806: Quick and dirty way to prevent below zero generation in old chunks, by setting the status to heightmap instead of empty
+                boolean stopBelowZero = false;
+                boolean belowZeroGenerationInExistingChunks = (levelAccessor != null) ? ((net.minecraft.server.level.ServerLevel) levelAccessor).spigotConfig.belowZeroGenerationInExistingChunks : org.spigotmc.SpigotConfig.belowZeroGenerationInExistingChunks;
+
+                if (version <= 2730 && !belowZeroGenerationInExistingChunks) {
+                    stopBelowZero = "full".equals(chunkData.getCompound("Level").flatMap(l -> l.getString("Status")).orElse(null));
+                }
+                // Spigot end
+
                 injectDatafixingContext(chunkData, levelKey, chunkGeneratorKey);
                 chunkData = DataFixTypes.CHUNK.updateToCurrentVersion(this.fixerUpper, chunkData, Math.max(1493, version));
+                // Spigot start
+                if (stopBelowZero) {
+                    chunkData.putString("Status", net.minecraft.core.registries.BuiltInRegistries.CHUNK_STATUS.getKey(net.minecraft.world.level.chunk.status.ChunkStatus.SPAWN).toString());
+                }
+                // Spigot end
                 removeDatafixingContext(chunkData);
                 NbtUtils.addCurrentDataVersion(chunkData);
                 return chunkData;
@@ -71,7 +98,7 @@ public class ChunkStorage implements AutoCloseable {
         }
     }
 
-    private LegacyStructureDataHandler getLegacyStructureHandler(ResourceKey<Level> level, Supplier<DimensionDataStorage> storage) {
+    private LegacyStructureDataHandler getLegacyStructureHandler(ResourceKey<net.minecraft.world.level.dimension.LevelStem> level, Supplier<DimensionDataStorage> storage) { // CraftBukkit
         LegacyStructureDataHandler legacyStructureDataHandler = this.legacyStructureHandler;
         if (legacyStructureDataHandler == null) {
             synchronized (this) {
@@ -86,7 +113,7 @@ public class ChunkStorage implements AutoCloseable {
     }
 
     public static void injectDatafixingContext(
-        CompoundTag chunkData, ResourceKey<Level> levelKey, Optional<ResourceKey<MapCodec<? extends ChunkGenerator>>> chunkGeneratorKey
+        CompoundTag chunkData, ResourceKey<net.minecraft.world.level.dimension.LevelStem> levelKey, Optional<ResourceKey<MapCodec<? extends ChunkGenerator>>> chunkGeneratorKey // CraftBukkit
     ) {
         CompoundTag compoundTag = new CompoundTag();
         compoundTag.putString("dimension", levelKey.location().toString());
@@ -107,8 +134,19 @@ public class ChunkStorage implements AutoCloseable {
     }
 
     public CompletableFuture<Void> write(ChunkPos pos, Supplier<CompoundTag> tagSupplier) {
+        // Paper start - guard against possible chunk pos desync
+        final Supplier<CompoundTag> guardedPosCheck = () -> {
+            CompoundTag nbt = tagSupplier.get();
+            if (nbt != null && !pos.equals(SerializableChunkData.getChunkCoordinate(nbt))) {
+                final String world = (ChunkStorage.this instanceof net.minecraft.server.level.ChunkMap) ? ((net.minecraft.server.level.ChunkMap) ChunkStorage.this).level.getWorld().getName() : null;
+                throw new IllegalArgumentException("Chunk coordinate and serialized data do not have matching coordinates, trying to serialize coordinate " + pos
+                    + " but compound says coordinate is " + SerializableChunkData.getChunkCoordinate(nbt) + (world == null ? " for an unknown world" : (" for world: " + world)));
+            }
+            return nbt;
+        };
+        // Paper end - guard against possible chunk pos desync
         this.handleLegacyStructureIndex(pos);
-        return this.worker.store(pos, tagSupplier);
+        return this.worker.store(pos, guardedPosCheck); // Paper - guard against possible chunk pos desync
     }
 
     protected void handleLegacyStructureIndex(ChunkPos chunkPos) {
