From 8970c8040a87bb9da1d22cabfd5dafb79924ed1f Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 06:37:42 -0700
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/level/block/CropBlock.java b/net/minecraft/world/level/block/CropBlock.java
index dfac558ab55ea2eb12756db2ff2992c30463081e..a38ce03a4dab6c83a0b54f47fd3c36d6da46fa24 100644
--- a/net/minecraft/world/level/block/CropBlock.java
+++ b/net/minecraft/world/level/block/CropBlock.java
@@ -80,8 +80,25 @@ public class CropBlock extends VegetationBlock implements BonemealableBlock {
             int age = this.getAge(state);
             if (age < this.getMaxAge()) {
                 float growthSpeed = getGrowthSpeed(this, level, pos);
-                if (random.nextInt((int)(25.0F / growthSpeed) + 1) == 0) {
-                    level.setBlock(pos, this.getStateForAge(age + 1), 2);
+                // Spigot start
+                int modifier = 100;
+                if (this == Blocks.BEETROOTS) {
+                    modifier = level.spigotConfig.beetrootModifier;
+                } else if (this == Blocks.CARROTS) {
+                    modifier = level.spigotConfig.carrotModifier;
+                } else if (this == Blocks.POTATOES) {
+                    modifier = level.spigotConfig.potatoModifier;
+                // Paper start - Fix Spigot growth modifiers
+                } else if (this == Blocks.TORCHFLOWER_CROP) {
+                    modifier = level.spigotConfig.torchFlowerModifier;
+                // Paper end - Fix Spigot growth modifiers
+                } else if (this == Blocks.WHEAT) {
+                    modifier = level.spigotConfig.wheatModifier;
+                }
+
+                if (random.nextFloat() < (modifier / (100.0F * (Math.floor((25.0F / growthSpeed) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
+                    // Spigot end
+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(level, pos, this.getStateForAge(age + 1), 2); // CraftBukkit
                 }
             }
         }
@@ -89,7 +106,7 @@ public class CropBlock extends VegetationBlock implements BonemealableBlock {
 
     public void growCrops(Level level, BlockPos pos, BlockState state) {
         int min = Math.min(this.getMaxAge(), this.getAge(state) + this.getBonemealAgeIncrease(level));
-        level.setBlock(pos, this.getStateForAge(min), 2);
+        org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(level, pos, this.getStateForAge(min), 2); // CraftBukkit
     }
 
     protected int getBonemealAgeIncrease(Level level) {
@@ -151,7 +168,8 @@ public class CropBlock extends VegetationBlock implements BonemealableBlock {
 
     @Override
     protected void entityInside(BlockState state, Level level, BlockPos pos, Entity entity, InsideBlockEffectApplier effectApplier) {
-        if (level instanceof ServerLevel serverLevel && entity instanceof Ravager && serverLevel.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
+        if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(level, pos)).callEvent()) { return; } // Paper - Add EntityInsideBlockEvent
+        if (level instanceof ServerLevel serverLevel && entity instanceof Ravager && org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(entity, pos, Blocks.AIR.defaultBlockState(), !serverLevel.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING))) { // CraftBukkit
             serverLevel.destroyBlock(pos, true, entity);
         }
 
