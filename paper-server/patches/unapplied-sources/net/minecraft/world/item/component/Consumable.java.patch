From 8970c8040a87bb9da1d22cabfd5dafb79924ed1f Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 06:37:42 -0700
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/item/component/Consumable.java b/net/minecraft/world/item/component/Consumable.java
index a57973a15fe8ddeaf5c322be83cb6e96698df033..bab1b98f6d51d867fbe986e731d8a6b2ff00573b 100644
--- a/net/minecraft/world/item/component/Consumable.java
+++ b/net/minecraft/world/item/component/Consumable.java
@@ -84,7 +84,18 @@ public record Consumable(
 
         stack.getAllOfType(ConsumableListener.class).forEach(consumableListener -> consumableListener.onConsume(level, entity, stack, this));
         if (!level.isClientSide) {
-            this.onConsumeEffects.forEach(consumeEffect -> consumeEffect.apply(level, stack, entity));
+            // CraftBukkit start
+            org.bukkit.event.entity.EntityPotionEffectEvent.Cause cause;
+            if (stack.is(net.minecraft.world.item.Items.MILK_BUCKET)) {
+                cause = org.bukkit.event.entity.EntityPotionEffectEvent.Cause.MILK;
+            } else if (stack.is(net.minecraft.world.item.Items.POTION)) {
+                cause = org.bukkit.event.entity.EntityPotionEffectEvent.Cause.POTION_DRINK;
+            } else {
+                cause = org.bukkit.event.entity.EntityPotionEffectEvent.Cause.FOOD;
+            }
+
+            this.onConsumeEffects.forEach(consumeEffect -> consumeEffect.apply(level, stack, entity, cause));
+            // CraftBukkit end
         }
 
         entity.gameEvent(this.animation == ItemUseAnimation.DRINK ? GameEvent.DRINK : GameEvent.EAT);
@@ -92,6 +103,17 @@ public record Consumable(
         return stack;
     }
 
+    // CraftBukkit start
+    public void cancelUsingItem(ServerPlayer player, ItemStack stack) {
+        final java.util.List<net.minecraft.network.protocol.Packet<? super net.minecraft.network.protocol.game.ClientGamePacketListener>> packets = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(); // Paper - properly resend entities - collect packets for bundle
+        stack.getAllOfType(ConsumableListener.class).forEach(listener -> {
+            listener.cancelUsingItem(player, stack, packets); // Paper - properly resend entities - collect packets for bundle
+        });
+        player.server.getPlayerList().sendActiveEffects(player, packets::add); // Paper - properly resend entities - collect packets for bundle
+        player.connection.send(new net.minecraft.network.protocol.game.ClientboundBundlePacket(packets));
+    }
+    // CraftBukkit end
+
     public boolean canConsume(LivingEntity entity, ItemStack stack) {
         FoodProperties foodProperties = stack.get(DataComponents.FOOD);
         return !(foodProperties != null && entity instanceof Player player) || player.canEat(foodProperties.canAlwaysEat());
