From 8970c8040a87bb9da1d22cabfd5dafb79924ed1f Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 06:37:42 -0700
Subject: [PATCH] paper File Patches


diff --git a/net/minecraft/world/item/crafting/RecipeMap.java b/net/minecraft/world/item/crafting/RecipeMap.java
index d6f2ee88cf1d51fc468c7aae1651a251191410e0..098753ddd215b6ef5915fac71d8c4f0b19cf4142 100644
--- a/net/minecraft/world/item/crafting/RecipeMap.java
+++ b/net/minecraft/world/item/crafting/RecipeMap.java
@@ -30,9 +30,35 @@ public class RecipeMap {
             builder1.put(recipeHolder.id(), recipeHolder);
         }
 
-        return new RecipeMap(builder.build(), builder1.build());
+        // CraftBukkit start - mutable
+        return new RecipeMap(com.google.common.collect.LinkedHashMultimap.create(builder.build()), com.google.common.collect.Maps.newLinkedHashMap(builder1.build()));
     }
 
+    public void addRecipe(RecipeHolder<?> holder) {
+        Collection<RecipeHolder<?>> recipes = this.byType.get(holder.value().getType());
+
+        if (this.byKey.containsKey(holder.id())) {
+            throw new IllegalStateException("Duplicate recipe ignored with ID " + holder.id());
+        } else {
+            recipes.add(holder);
+            this.byKey.put(holder.id(), holder);
+        }
+    }
+    // CraftBukkit end
+
+    // Paper start - replace removeRecipe implementation
+    public <T extends RecipeInput> boolean removeRecipe(ResourceKey<Recipe<T>> mcKey) {
+        //noinspection unchecked
+        final RecipeHolder<Recipe<T>> remove = (RecipeHolder<Recipe<T>>) this.byKey.remove(mcKey);
+        if (remove == null) {
+            return false;
+        }
+        final Collection<? extends RecipeHolder<? extends Recipe<T>>> recipes = this.byType(remove.value().getType());
+        return recipes.remove(remove);
+        // Paper end - why are you using a loop???
+    }
+    // Paper end - replace removeRecipe implementation
+
     public <I extends RecipeInput, T extends Recipe<I>> Collection<RecipeHolder<T>> byType(RecipeType<T> type) {
         return (Collection)this.byType.get(type);
     }
