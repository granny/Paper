From 8970c8040a87bb9da1d22cabfd5dafb79924ed1f Mon Sep 17 00:00:00 2001
From: File <noreply+automated@papermc.io>
Date: Sun, 20 Apr 1997 06:37:42 -0700
Subject: [PATCH] paper File Patches


diff --git a/com/mojang/datafixers/DataFixerBuilder.java b/com/mojang/datafixers/DataFixerBuilder.java
index 4232ce05ad7dd122a78a04ccef3b59d4caf542df..c4984ad9c3dc471acd23fa53a0fb0069691992c0 100644
--- a/com/mojang/datafixers/DataFixerBuilder.java
+++ b/com/mojang/datafixers/DataFixerBuilder.java
@@ -29,8 +29,10 @@ public class DataFixerBuilder {
     private final Int2ObjectSortedMap<Schema> schemas = new Int2ObjectAVLTreeMap<>();
     private final List<DataFix> globalList = new ArrayList<>();
     private final IntSortedSet fixerVersions = new IntAVLTreeSet();
+    private final int minDataFixPrecacheVersion; // Paper - Perf: Cache DataFixerUpper Rewrite Rules on demand
 
     public DataFixerBuilder(final int dataVersion) {
+        this.minDataFixPrecacheVersion = Integer.getInteger("Paper.minPrecachedDatafixVersion", dataVersion + 1) * 10; // Paper - Perf: default to precache nothing - Mojang stores versions * 10 to allow for 'sub versions'
         this.dataVersion = dataVersion;
     }
 
@@ -88,6 +90,7 @@ public class DataFixerBuilder {
             final IntIterator iterator = fixerUpper.fixerVersions().iterator();
             while (iterator.hasNext()) {
                 final int versionKey = iterator.nextInt();
+                if (versionKey < minDataFixPrecacheVersion) continue; // Paper - Perf: Cache DataFixerUpper Rewrite Rules on demand
                 final Schema schema = schemas.get(versionKey);
                 for (final String typeName : schema.types()) {
                     if (!requiredTypeNames.contains(typeName)) {
